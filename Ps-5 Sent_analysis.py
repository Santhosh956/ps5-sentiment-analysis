# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yjNWXHyFYzQOSx3S_x3ycHw43iRHO6O8
"""

import streamlit as st
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
import matplotlib.pyplot as plt
import pandas as pd

# Streamlit app configuration
st.set_page_config(page_title="PS5 Sentiment Analysis", layout="wide")
st.title("ðŸŽ® Web Scraping and Sentiment Analysis")
st.write("""
Explore the sentiment around PlayStation 5 by analyzing content from the official PS5 website.
This tool scrapes text content and evaluates its emotional tone using natural language processing.
""")

# Custom CSS for better visuals
st.markdown("""
<style>
    .positive { color: green; font-weight: bold; }
    .neutral { color: blue; font-weight: bold; }
    .negative { color: red; font-weight: bold; }
    .stProgress > div > div > div > div { background-color: #4CAF50; }
</style>
""", unsafe_allow_html=True)

@st.cache_data(show_spinner=False, ttl=3600)  # Cache for 1 hour
def scrape_website(url):
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
    try:
        with st.spinner('Scraping PS5 website content...'):
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'html.parser')
            paragraphs = soup.find_all(['p', 'h1', 'h2', 'h3', 'span', 'div'])
            return [tag.get_text(strip=True) for tag in paragraphs if tag.get_text(strip=True)]
    except Exception as e:
        st.error(f"Error scraping website: {str(e)}")
        return None

def analyze_sentiment(text_data):
    results = []
    with st.spinner('Analyzing sentiment...'):
        for sentence in text_data:
            if len(sentence.split()) > 3:  # Only analyze sentences with more than 3 words
                blob = TextBlob(sentence)
                polarity = blob.sentiment.polarity
                sentiment = "positive" if polarity > 0 else "negative" if polarity < 0 else "neutral"
                results.append({
                    'text': sentence,
                    'polarity': polarity,
                    'sentiment': sentiment
                })
    return results

# Main app logic
url = 'https://www.playstation.com/en-in/ps5/'
text_data = scrape_website(url)

if text_data:
    sentiments_list = analyze_sentiment(text_data)

    if sentiments_list:
        # Create DataFrame for better display
        df = pd.DataFrame(sentiments_list)

        # Calculate metrics
        positive = df[df['polarity'] > 0]
        neutral = df[df['polarity'] == 0]
        negative = df[df['polarity'] < 0]

        # Display metrics
        col1, col2, col3 = st.columns(3)
        col1.metric("Positive Sentences", len(positive), delta_color="off")
        col2.metric("Neutral Sentences", len(neutral), delta_color="off")
        col3.metric("Negative Sentences", len(negative), delta_color="off")

        # Show sample sentences with colored tags
        st.subheader("Sample Sentences by Sentiment")

        def display_sample(sentiment_df, sentiment_type):
            if not sentiment_df.empty:
                sample = sentiment_df.sample(min(2, len(sentiment_df)))
                for idx, row in sample.iterrows():
                    st.markdown(f"""
                    <div class="{row['sentiment']}">
                        {row['sentiment'].upper()}: {row['text']}
                        (Polarity: {row['polarity']:.2f})
                    </div>
                    """, unsafe_allow_html=True)

        display_sample(positive, "positive")
        display_sample(neutral, "neutral")
        display_sample(negative, "negative")

        # Enhanced visualization
        st.subheader("Sentiment Distribution")

        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

        # Pie chart
        sizes = [len(positive), len(neutral), len(negative)]
        labels = ['Positive', 'Neutral', 'Negative']
        colors = ['#4CAF50', '#2196F3', '#F44336']
        ax1.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
        ax1.set_title('Sentiment Proportion')
        ax1.axis('equal')

        # Bar chart
        ax2.bar(labels, sizes, color=colors)
        ax2.set_title('Sentiment Count')
        ax2.set_ylabel('Number of Sentences')

        st.pyplot(fig)

        # Show raw data option
        if st.checkbox("Show raw data"):
            st.dataframe(df.sort_values('polarity', ascending=False))
    else:
        st.warning("No valid sentences found for sentiment analysis.")
else:
    st.warning("Could not retrieve website content. Please try again later.")

!streamlit run /usr/local/lib/python3.11/dist-packages/colab_kernel_launcher.py

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit